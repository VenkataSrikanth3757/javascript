1.) Trainagular number sequence. (1,3,6,10,15,21,...)=>(1,1+2=3,1+2+3=6,1+2+3+4=10,...)
===========================================================================================================================================
Source Code
----------------------
let n = 10;
let count = 0;
for (let i = 1; i <= 10; i++) {

    count += i;
    console.log(count);
}
-----------------------------------------
outout:-
=============================
1 3 6 10 15 21 28 36 45 55

============================================================================================================================================
pattern program:
============================================================================================================================================
let n = 5;
let string = "";
for (let i = 1; i <= n; i++) {
    for (let j = 1; j <= i; j++) {
        string += "*";
    }
    string += "\n";
}
console.log(string);
------------------------------------------
output:-
------------------------------------------
*
**
***
****
*****
---------------------------------------------
pattern prymid
--------------------------------------------
source code:-
================================
let n = 5;
let string = "";
for (let i = 1; i <= n; i++) {
    for (let j = 1; j <= n - i; j++) {
        string += " ";
    }
    for (let k = 0; k < 2 * i - 1; k++) {
        string += "*";
    }
    string += "\n";
}
console.log(string);
===================================
output

     *
   ***
  *****
 *******
*********
============================================================================================================================================
prime numbers program
============================================================================================================================================
var lowernum = 2;
var highernum = 50;
console.log(`The prime numbers between ${lowernum} and ${highernum} are:`);

for (let i = lowernum; i <= highernum; i++) {
    let flag = 0;
    for (let j = 2; j < i; j++) {
        if (i % j == 0) {
            flag = 1;
            break;
        }
    }
    if (i > 1 && flag == 1) {
        console.log(i);
    }
}
========================================
output
========================================
4 6 8 9 10 12 14 15 16 18 20 21 22 24 25 26 27 28 30 32 33 34 35 36 38 39 40 42 44 45 46 48 49 50
============================================================================================================================================
fibonacci nseries
===========================================================================================================================================
source code:
------------------------------
const number = 10;
let numOne = 0,
    numTwo = 1,
    thirdVal;

console.log('Fibonacci Series:');

for (let i = 1; i <= number; i++) {
    console.log(numOne);
    thirdVal = numOne + numTwo;
    numOne = numTwo;
    numTwo = thirdVal;
}
============================================================================================================================================
Why do-While is important
============================================================================================================================================
The do...while loop is similar to the while loop except that the condition check happens at the end of the loop.
 This means that the loop will always be executed at least once, even if the condition is false.

do {
   Statement(s) to be executed;
} while (expression);

statement
--------------------------------------------------
A statement that is executed at least once and is re-executed each time the condition evaluates to true. 
To execute multiple statements within the loop, use a block statement ({ ... }) to group those statements.
condition
--------------------------------------------------
An expression evaluated after each pass through the loop. If condition evaluates to true, the statement is re-executed
. When condition evaluates to false, control passes to the statement following the do...while.